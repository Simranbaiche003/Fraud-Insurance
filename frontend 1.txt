AnalyticsDashboard.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { BarChart3, PieChart, MapPin, TrendingDown, AlertTriangle } from "lucide-react";

interface AnalyticsDashboardProps {
  detailed?: boolean;
}

export const AnalyticsDashboard = ({ detailed = false }: AnalyticsDashboardProps) => {
  const regionData = [
    { region: 'Delhi', total: 847, fraudulent: 38, percentage: 4.5 },
    { region: 'Mumbai', total: 923, fraudulent: 52, percentage: 5.6 },
    { region: 'Bangalore', total: 654, fraudulent: 21, percentage: 3.2 },
    { region: 'Chennai', total: 423, fraudulent: 27, percentage: 6.4 },
  ];

  const hospitalData = [
    { hospital: 'Apollo Hospital', claims: 234, fraudulent: 12, amount: '₹2.4M' },
    { hospital: 'Max Healthcare', claims: 189, fraudulent: 18, amount: '₹3.1M' },
    { hospital: 'Fortis Hospital', claims: 167, fraudulent: 8, amount: '₹1.8M' },
    { hospital: 'AIIMS', claims: 145, fraudulent: 3, amount: '₹0.8M' },
    { hospital: 'Unknown Clinics', claims: 89, fraudulent: 67, amount: '₹8.9M' },
  ];

  const fraudTypes = [
    { type: 'Overbilling', count: 45, percentage: 35.4 },
    { type: 'Fake Hospital', count: 32, percentage: 25.2 },
    { type: 'Duplicate Claims', count: 28, percentage: 22.0 },
    { type: 'Document Forgery', count: 15, percentage: 11.8 },
    { type: 'Other', count: 7, percentage: 5.5 },
  ];

  return (
    <div className="space-y-6">
      {/* Quick Analytics Cards (always show) */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Region-wise Fraud Heatmap */}
        <Card className="bg-gradient-to-br from-card to-card/50 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <MapPin className="w-5 h-5 mr-2 text-danger" />
              Regional Fraud Analysis
            </CardTitle>
            <CardDescription>Fraud distribution across regions</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {regionData.map((region) => (
              <div key={region.region} className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="font-medium">{region.region}</span>
                  <Badge 
                    className={
                      region.percentage > 5 
                        ? "bg-danger text-danger-foreground" 
                        : region.percentage > 3 
                        ? "bg-warning text-warning-foreground"
                        : "bg-success text-success-foreground"
                    }
                  >
                    {region.percentage}%
                  </Badge>
                </div>
                <Progress 
                  value={region.percentage} 
                  className="h-2" 
                />
                <div className="text-xs text-muted-foreground">
                  {region.fraudulent} of {region.total} claims
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Fraud Types Distribution */}
        <Card className="bg-gradient-to-br from-card to-card/50 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <PieChart className="w-5 h-5 mr-2 text-warning" />
              Fraud Types
            </CardTitle>
            <CardDescription>Distribution of fraud categories</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            {fraudTypes.map((type) => (
              <div key={type.type} className="flex justify-between items-center">
                <div className="flex items-center space-x-2">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{
                      backgroundColor: type.type === 'Overbilling' ? 'hsl(var(--danger))' :
                                     type.type === 'Fake Hospital' ? 'hsl(var(--warning))' :
                                     type.type === 'Duplicate Claims' ? 'hsl(var(--info))' :
                                     'hsl(var(--muted-foreground))'
                    }}
                  />
                  <span className="text-sm font-medium">{type.type}</span>
                </div>
                <div className="text-right">
                  <div className="text-sm font-bold">{type.count}</div>
                  <div className="text-xs text-muted-foreground">{type.percentage}%</div>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Monthly Trends */}
        <Card className="bg-gradient-to-br from-card to-card/50 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <TrendingDown className="w-5 h-5 mr-2 text-success" />
              Monthly Trends
            </CardTitle>
            <CardDescription>Fraud detection improvements</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm">Detection Accuracy</span>
                <span className="text-sm font-bold text-success">94.2%</span>
              </div>
              <Progress value={94.2} className="h-2" />
              
              <div className="flex justify-between items-center">
                <span className="text-sm">False Positives</span>
                <span className="text-sm font-bold text-warning">2.8%</span>
              </div>
              <Progress value={2.8} className="h-2" />
              
              <div className="flex justify-between items-center">
                <span className="text-sm">Processing Speed</span>
                <span className="text-sm font-bold text-info">98.5%</span>
              </div>
              <Progress value={98.5} className="h-2" />
            </div>
            
            <div className="pt-2 border-t border-border">
              <div className="text-xs text-muted-foreground">
                ↗️ 12% improvement this month
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Analytics (only show when detailed prop is true) */}
      {detailed && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Hospital Analysis */}
          <Card className="bg-gradient-to-br from-card to-card/50 shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center text-lg">
                <BarChart3 className="w-5 h-5 mr-2 text-info" />
                Hospital-wise Analysis
              </CardTitle>
              <CardDescription>Fraud patterns by healthcare providers</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {hospitalData.map((hospital) => (
                  <div key={hospital.hospital} className="p-3 bg-muted/30 rounded-lg">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h4 className="font-semibold">{hospital.hospital}</h4>
                        <p className="text-sm text-muted-foreground">
                          {hospital.claims} total claims
                        </p>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-bold text-danger">
                          {hospital.fraudulent} fraudulent
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {hospital.amount} at risk
                        </div>
                      </div>
                    </div>
                    <Progress 
                      value={(hospital.fraudulent / hospital.claims) * 100} 
                      className="h-2"
                    />
                    <div className="flex justify-between items-center mt-1">
                      <span className="text-xs text-muted-foreground">
                        Risk Level: {
                          (hospital.fraudulent / hospital.claims) > 0.4 ? 'High' :
                          (hospital.fraudulent / hospital.claims) > 0.1 ? 'Medium' : 'Low'
                        }
                      </span>
                      <span className="text-xs font-medium">
                        {((hospital.fraudulent / hospital.claims) * 100).toFixed(1)}%
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Risk Indicators */}
          <Card className="bg-gradient-to-br from-card to-card/50 shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center text-lg">
                <AlertTriangle className="w-5 h-5 mr-2 text-warning" />
                Risk Indicators
              </CardTitle>
              <CardDescription>Key fraud detection metrics and alerts</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="p-3 bg-danger/10 rounded-lg border border-danger/20">
                  <div className="text-2xl font-bold text-danger">127</div>
                  <div className="text-sm text-danger">Active Alerts</div>
                </div>
                <div className="p-3 bg-warning/10 rounded-lg border border-warning/20">
                  <div className="text-2xl font-bold text-warning">89</div>
                  <div className="text-sm text-warning">Under Review</div>
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex items-center justify-between p-2 bg-danger/5 rounded border-l-4 border-danger">
                  <div>
                    <div className="text-sm font-medium">High-Risk Pattern</div>
                    <div className="text-xs text-muted-foreground">
                      Unusual billing spike detected
                    </div>
                  </div>
                  <Badge className="bg-danger text-danger-foreground">Critical</Badge>
                </div>

                <div className="flex items-center justify-between p-2 bg-warning/5 rounded border-l-4 border-warning">
                  <div>
                    <div className="text-sm font-medium">Document Anomaly</div>
                    <div className="text-xs text-muted-foreground">
                      Suspicious document formatting
                    </div>
                  </div>
                  <Badge className="bg-warning text-warning-foreground">Medium</Badge>
                </div>

                <div className="flex items-center justify-between p-2 bg-info/5 rounded border-l-4 border-info">
                  <div>
                    <div className="text-sm font-medium">New Hospital</div>
                    <div className="text-xs text-muted-foreground">
                      Unverified healthcare provider
                    </div>
                  </div>
                  <Badge className="bg-info text-info-foreground">Low</Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

ClaimsTables.tsx
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Search, Filter, Eye, AlertTriangle, CheckCircle, Clock } from "lucide-react";

interface Claim {
  id: string;
  patientName: string;
  hospital: string;
  amount: string;
  date: string;
  fraudStatus: 'clean' | 'suspicious' | 'fraudulent' | 'pending';
  fraudReason?: string;
  location: string;
  claimType: string;
}

const mockClaims: Claim[] = [
  {
    id: 'CLM001',
    patientName: 'Rajesh Kumar',
    hospital: 'Apollo Hospital, Delhi',
    amount: '₹45,000',
    date: '2024-01-15',
    fraudStatus: 'clean',
    location: 'Delhi',
    claimType: 'Surgery'
  },
  {
    id: 'CLM002',
    patientName: 'Priya Sharma',
    hospital: 'Max Healthcare, Mumbai',
    amount: '₹1,25,000',
    date: '2024-01-14',
    fraudStatus: 'fraudulent',
    fraudReason: 'Overbilling - Amount exceeds hospital average by 300%',
    location: 'Mumbai',
    claimType: 'Emergency'
  },
  {
    id: 'CLM003',
    patientName: 'Amit Patel',
    hospital: 'Fortis Hospital, Bangalore',
    amount: '₹32,500',
    date: '2024-01-13',
    fraudStatus: 'suspicious',
    fraudReason: 'Duplicate claim pattern detected',
    location: 'Bangalore',
    claimType: 'Consultation'
  },
  {
    id: 'CLM004',
    patientName: 'Sunita Reddy',
    hospital: 'AIIMS, Delhi',
    amount: '₹67,800',
    date: '2024-01-12',
    fraudStatus: 'clean',
    location: 'Delhi',
    claimType: 'Treatment'
  },
  {
    id: 'CLM005',
    patientName: 'Vijay Singh',
    hospital: 'Unknown Clinic, Noida',
    amount: '₹89,000',
    date: '2024-01-11',
    fraudStatus: 'fraudulent',
    fraudReason: 'Hospital not verified in database',
    location: 'Noida',
    claimType: 'Surgery'
  }
];

export const ClaimsTable = () => {
  const [claims, setClaims] = useState<Claim[]>(mockClaims);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [locationFilter, setLocationFilter] = useState<string>('all');

  const filteredClaims = claims.filter(claim => {
    const matchesSearch = 
      claim.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      claim.hospital.toLowerCase().includes(searchTerm.toLowerCase()) ||
      claim.id.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || claim.fraudStatus === statusFilter;
    const matchesLocation = locationFilter === 'all' || claim.location === locationFilter;
    
    return matchesSearch && matchesStatus && matchesLocation;
  });

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'clean':
        return <Badge className="bg-success text-success-foreground"><CheckCircle className="w-3 h-3 mr-1" />Clean</Badge>;
      case 'suspicious':
        return <Badge className="bg-warning text-warning-foreground"><AlertTriangle className="w-3 h-3 mr-1" />Suspicious</Badge>;
      case 'fraudulent':
        return <Badge className="bg-danger text-danger-foreground"><AlertTriangle className="w-3 h-3 mr-1" />Fraudulent</Badge>;
      case 'pending':
        return <Badge variant="secondary"><Clock className="w-3 h-3 mr-1" />Pending</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  const getAmountColor = (status: string) => {
    switch (status) {
      case 'fraudulent':
        return 'text-danger font-bold';
      case 'suspicious':
        return 'text-warning font-semibold';
      default:
        return 'text-foreground';
    }
  };

  return (
    <div className="space-y-6">
      {/* Filters */}
      <Card className="bg-muted/20">
        <CardHeader>
          <CardTitle className="text-lg flex items-center">
            <Filter className="w-5 h-5 mr-2" />
            Filters & Search
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder="Search claims..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="clean">Clean</SelectItem>
                <SelectItem value="suspicious">Suspicious</SelectItem>
                <SelectItem value="fraudulent">Fraudulent</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
              </SelectContent>
            </Select>

            <Select value={locationFilter} onValueChange={setLocationFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by location" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Locations</SelectItem>
                <SelectItem value="Delhi">Delhi</SelectItem>
                <SelectItem value="Mumbai">Mumbai</SelectItem>
                <SelectItem value="Bangalore">Bangalore</SelectItem>
                <SelectItem value="Noida">Noida</SelectItem>
              </SelectContent>
            </Select>

            <Button variant="outline" onClick={() => {
              setSearchTerm('');
              setStatusFilter('all');
              setLocationFilter('all');
            }}>
              Clear Filters
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Claims Table */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">
            Claims Overview ({filteredClaims.length} results)
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Claim ID</TableHead>
                  <TableHead>Patient Name</TableHead>
                  <TableHead>Hospital</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredClaims.map((claim) => (
                  <TableRow key={claim.id} className="hover:bg-muted/30">
                    <TableCell className="font-mono font-medium">{claim.id}</TableCell>
                    <TableCell className="font-medium">{claim.patientName}</TableCell>
                    <TableCell>
                      <div>
                        <div className="font-medium">{claim.hospital.split(',')[0]}</div>
                        <div className="text-sm text-muted-foreground">{claim.location}</div>
                      </div>
                    </TableCell>
                    <TableCell className={getAmountColor(claim.fraudStatus)}>
                      {claim.amount}
                    </TableCell>
                    <TableCell>{claim.date}</TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        {getStatusBadge(claim.fraudStatus)}
                        {claim.fraudReason && (
                          <div className="text-xs text-muted-foreground max-w-xs">
                            {claim.fraudReason}
                          </div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Button variant="outline" size="sm">
                        <Eye className="w-4 h-4 mr-1" />
                        View
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

ClaimUploader.tsx
import { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Upload, FileText, Image, CheckCircle, AlertTriangle, Loader2 } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

interface UploadedFile {
  id: string;
  name: string;
  size: string;
  status: 'processing' | 'completed' | 'failed';
  fraudStatus?: 'clean' | 'suspicious' | 'fraudulent';
  extractedData?: any;
}

export const ClaimUploader = () => {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [uploadProgress, setUploadProgress] = useState(0);
  const { toast } = useToast();

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const newFiles: UploadedFile[] = acceptedFiles.map(file => ({
      id: Math.random().toString(36).substring(7),
      name: file.name,
      size: `${(file.size / (1024 * 1024)).toFixed(2)} MB`,
      status: 'processing'
    }));

    setFiles(prev => [...prev, ...newFiles]);

    // Simulate file processing
    newFiles.forEach((file, index) => {
      setTimeout(() => {
        setUploadProgress((index + 1) / newFiles.length * 100);
        
        setTimeout(() => {
          setFiles(prev => prev.map(f => 
            f.id === file.id 
              ? { 
                  ...f, 
                  status: Math.random() > 0.2 ? 'completed' : 'failed',
                  fraudStatus: Math.random() > 0.7 ? 'fraudulent' : Math.random() > 0.4 ? 'suspicious' : 'clean',
                  extractedData: {
                    claimId: `CLM${Math.random().toString(36).substring(2, 8).toUpperCase()}`,
                    patientName: 'John Doe',
                    hospital: 'City General Hospital',
                    amount: `₹${(Math.random() * 50000 + 10000).toFixed(0)}`,
                    date: new Date().toLocaleDateString()
                  }
                }
              : f
          ));
        }, 2000 + index * 1000);
      }, index * 500);
    });

    toast({
      title: "Upload Started",
      description: `Processing ${acceptedFiles.length} file(s) for fraud detection`,
    });
  }, [toast]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'image/*': ['.png', '.jpg', '.jpeg']
    },
    multiple: true
  });

  const getStatusIcon = (status: string, fraudStatus?: string) => {
    if (status === 'processing') return <Loader2 className="h-4 w-4 animate-spin" />;
    if (status === 'failed') return <AlertTriangle className="h-4 w-4 text-danger" />;
    if (fraudStatus === 'fraudulent') return <AlertTriangle className="h-4 w-4 text-danger" />;
    if (fraudStatus === 'suspicious') return <AlertTriangle className="h-4 w-4 text-warning" />;
    return <CheckCircle className="h-4 w-4 text-success" />;
  };

  const getStatusBadge = (status: string, fraudStatus?: string) => {
    if (status === 'processing') return <Badge variant="secondary">Processing</Badge>;
    if (status === 'failed') return <Badge className="bg-danger text-danger-foreground">Failed</Badge>;
    if (fraudStatus === 'fraudulent') return <Badge className="bg-danger text-danger-foreground">Fraudulent</Badge>;
    if (fraudStatus === 'suspicious') return <Badge className="bg-warning text-warning-foreground">Suspicious</Badge>;
    return <Badge className="bg-success text-success-foreground">Clean</Badge>;
  };

  return (
    <div className="space-y-6">
      {/* Upload Area */}
      <div
        {...getRootProps()}
        className={`
          border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-all duration-200
          ${isDragActive 
            ? 'border-primary bg-primary/5 shadow-lg shadow-primary/20' 
            : 'border-border hover:border-primary/50 hover:bg-muted/30'
          }
        `}
      >
        <input {...getInputProps()} />
        <div className="flex flex-col items-center space-y-4">
          <div className="p-4 bg-primary/10 rounded-full">
            <Upload className="h-8 w-8 text-primary" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-foreground mb-2">
              {isDragActive ? "Drop files here" : "Upload Insurance Documents"}
            </h3>
            <p className="text-muted-foreground mb-4">
              Drag and drop PDF files or images, or click to browse
            </p>
            <Button variant="outline" className="border-primary/20 hover:bg-primary/5">
              Select Files
            </Button>
          </div>
        </div>
      </div>

      {/* Upload Progress */}
      {files.some(f => f.status === 'processing') && (
        <Card className="bg-muted/50">
          <CardHeader>
            <CardTitle className="text-sm">Processing Files...</CardTitle>
          </CardHeader>
          <CardContent>
            <Progress value={uploadProgress} className="w-full" />
            <p className="text-xs text-muted-foreground mt-2">
              Extracting data and analyzing for fraud indicators
            </p>
          </CardContent>
        </Card>
      )}

      {/* Uploaded Files List */}
      {files.length > 0 && (
        <div className="space-y-3">
          <h3 className="text-lg font-semibold">Uploaded Files</h3>
          {files.map((file) => (
            <Card key={file.id} className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {file.name.endsWith('.pdf') ? (
                    <FileText className="h-8 w-8 text-danger" />
                  ) : (
                    <Image className="h-8 w-8 text-info" />
                  )}
                  <div>
                    <p className="font-medium text-foreground">{file.name}</p>
                    <p className="text-sm text-muted-foreground">{file.size}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  {getStatusIcon(file.status, file.fraudStatus)}
                  {getStatusBadge(file.status, file.fraudStatus)}
                </div>
              </div>
              
              {file.extractedData && (
                <div className="mt-4 p-3 bg-muted/30 rounded-lg">
                  <h4 className="text-sm font-semibold mb-2">Extracted Information</h4>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div><span className="font-medium">Claim ID:</span> {file.extractedData.claimId}</div>
                    <div><span className="font-medium">Patient:</span> {file.extractedData.patientName}</div>
                    <div><span className="font-medium">Hospital:</span> {file.extractedData.hospital}</div>
                    <div><span className="font-medium">Amount:</span> {file.extractedData.amount}</div>
                  </div>
                </div>
              )}
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};