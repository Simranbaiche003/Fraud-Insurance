import { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Upload, FileText, Image, CheckCircle, AlertTriangle, Loader2 } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

// Define the type for extracted claim data
interface ClaimResponse {
  hospital: string;
  disease: string;
  treatment: string;
  amount: number;
  patientName: string;
  claimId: string;
  fraudStatus: 'clean' | 'suspicious' | 'fraudulent';
  fraudReason: string;
}

// Define the uploaded file structure
interface UploadedFile {
  id: string;
  name: string;
  size: string;
  status: 'processing' | 'completed' | 'failed';
  fraudStatus?: 'clean' | 'suspicious' | 'fraudulent';
  extractedData?: ClaimResponse;
}

export const ClaimUploader = () => {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const { toast } = useToast();

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    const newFiles: UploadedFile[] = acceptedFiles.map(file => ({
      id: Math.random().toString(36).substring(7),
      name: file.name,
      size: `${(file.size / (1024 * 1024)).toFixed(2)} MB`,
      status: 'processing'
    }));

    setFiles(prev => [...prev, ...newFiles]);

    for (const file of acceptedFiles) {
      const formData = new FormData();
      formData.append("file", file);

      try {
        const response = await fetch("http://127.0.0.1:8000/api/claims/upload", {
          method: "POST",
          body: formData
        });

        if (!response.ok) throw new Error("Failed to upload file");

        const data: ClaimResponse = await response.json();

        // Update the file state with backend response
        setFiles(prev => prev.map(f =>
          f.name === file.name
            ? {
                ...f,
                status: 'completed',
                fraudStatus: data.fraudStatus,
                extractedData: data
              }
            : f
        ));

      } catch (error) {
        console.error(error);
        setFiles(prev => prev.map(f =>
          f.name === file.name ? { ...f, status: 'failed' } : f
        ));
      }
    }

    toast({
      title: "Upload Complete",
      description: `Processed ${acceptedFiles.length} file(s) with backend`,
    });
  }, [toast]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'image/*': ['.png', '.jpg', '.jpeg']
    },
    multiple: true
  });

  const getStatusIcon = (status: string, fraudStatus?: string) => {
    if (status === 'processing') return <Loader2 className="h-4 w-4 animate-spin" />;
    if (status === 'failed') return <AlertTriangle className="h-4 w-4 text-danger" />;
    if (fraudStatus === 'fraudulent') return <AlertTriangle className="h-4 w-4 text-danger" />;
    if (fraudStatus === 'suspicious') return <AlertTriangle className="h-4 w-4 text-warning" />;
    return <CheckCircle className="h-4 w-4 text-success" />;
  };

  const getStatusBadge = (status: string, fraudStatus?: string) => {
    if (status === 'processing') return <Badge variant="secondary">Processing</Badge>;
    if (status === 'failed') return <Badge className="bg-danger text-danger-foreground">Failed</Badge>;
    if (fraudStatus === 'fraudulent') return <Badge className="bg-danger text-danger-foreground">Fraudulent</Badge>;
    if (fraudStatus === 'suspicious') return <Badge className="bg-warning text-warning-foreground">Suspicious</Badge>;
    return <Badge className="bg-success text-success-foreground">Clean</Badge>;
  };

  return (
    <div className="space-y-6">
      {/* Upload Area */}
      <div
        {...getRootProps()}
        className={`
          border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-all duration-200
          ${isDragActive 
            ? 'border-primary bg-primary/5 shadow-lg shadow-primary/20' 
            : 'border-border hover:border-primary/50 hover:bg-muted/30'
          }
        `}
      >
        <input {...getInputProps()} />
        <div className="flex flex-col items-center space-y-4">
          <div className="p-4 bg-primary/10 rounded-full">
            <Upload className="h-8 w-8 text-primary" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-foreground mb-2">
              {isDragActive ? "Drop files here" : "Upload Insurance Documents"}
            </h3>
            <p className="text-muted-foreground mb-4">
              Drag and drop PDF files or images, or click to browse
            </p>
            <Button variant="outline" className="border-primary/20 hover:bg-primary/5">
              Select Files
            </Button>
          </div>
        </div>
      </div>

      {/* Upload Progress */}
      {files.some(f => f.status === 'processing') && (
        <Card className="bg-muted/50">
          <CardHeader>
            <CardTitle className="text-sm">Processing Files...</CardTitle>
          </CardHeader>
          <CardContent>
            <Progress value={files.filter(f => f.status === 'completed').length / files.length * 100} className="w-full" />
            <p className="text-xs text-muted-foreground mt-2">
              Extracting data and analyzing for fraud indicators
            </p>
          </CardContent>
        </Card>
      )}

      {/* Uploaded Files List */}
      {files.length > 0 && (
        <div className="space-y-3">
          <h3 className="text-lg font-semibold">Uploaded Files</h3>
          {files.map((file) => (
            <Card key={file.id} className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {file.name.endsWith('.pdf') ? (
                    <FileText className="h-8 w-8 text-danger" />
                  ) : (
                    <Image className="h-8 w-8 text-info" />
                  )}
                  <div>
                    <p className="font-medium text-foreground">{file.name}</p>
                    <p className="text-sm text-muted-foreground">{file.size}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  {getStatusIcon(file.status, file.fraudStatus)}
                  {getStatusBadge(file.status, file.fraudStatus)}
                </div>
              </div>

              {file.extractedData && (
                <div className="mt-4 p-3 bg-muted/30 rounded-lg">
                  <h4 className="text-sm font-semibold mb-2">Extracted Information</h4>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div><span className="font-medium">Claim ID:</span> {file.extractedData.claimId}</div>
                    <div><span className="font-medium">Patient:</span> {file.extractedData.patientName}</div>
                    <div><span className="font-medium">Hospital:</span> {file.extractedData.hospital}</div>
                    <div><span className="font-medium">Amount:</span> {file.extractedData.amount}</div>
                    <div><span className="font-medium">Fraud Status:</span> {file.extractedData.fraudStatus}</div>
                  </div>
                </div>
              )}
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};
